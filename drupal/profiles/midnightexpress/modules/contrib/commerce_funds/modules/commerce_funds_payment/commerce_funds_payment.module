<?php

/**
 * Implements hook_payment_method_info()
 */
function commerce_funds_payment_commerce_payment_method_info() {

  $payment_methods = array();

  global $user;

  $balance = db_query("SELECT * FROM {commerce_funds_user_funds} WHERE uid= :uid", array(':uid' => $user->uid))->fetchAssoc();

  $order_id = is_numeric(arg(1)) ? arg(1) : 0;

  if ($order_id) {
    $order = commerce_order_load($order_id);

    if (!(array_key_exists('type', $order->data) && $order->data['type'] == 'commerce_funds_deposit')) {
      $payment_methods['commerce_funds_payment'] = array(
          'title' => t('Account Funds'),
          'short_title' => t('Funds'),
          'display_title' => t('Account Balance'). ' (' . commerce_currency_format($balance['balance'], commerce_default_currency()) . ')',
          'description' => t('Funds in User Account'),
          'terminal' => FALSE,
          'offsite' => FALSE,
      );
    }
  }
  else {
    $payment_methods['commerce_funds_payment'] = array(
        'title' => t('Account Funds'),
        'short_title' => t('Funds'),
        'display_title' => t('Account Balance'). ' (' . commerce_currency_format($balance['balance'], commerce_default_currency()) . ')',
        'description' => t('Funds in User Account'),
        'terminal' => FALSE,
        'offsite' => FALSE,
    );
  }

  return $payment_methods;
}

function commerce_funds_payment_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  $form['dummy'] = array(
      '#type' => 'hidden',
      '#value' => 'dummy'
  );

  return $form;
}

function commerce_funds_payment_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $charge) {
  global $user;

  $balance = db_query("SELECT * FROM {commerce_funds_user_funds} WHERE uid= :uid", array(':uid' => $user->uid))->fetchAssoc();

  if($balance['balance'] < $order->commerce_order_total['und'][0]['amount']){
    form_set_error("dummy", t("Account balance can't be less than order amount"));
    return FALSE;
  }
}

function commerce_funds_payment_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_funds_payment'] = $pane_values;

  commerce_funds_payment_transaction($payment_method, $order, $charge);
}

function commerce_funds_payment_transaction($payment_method, $order, $charge) {

  global $user;

  $user_balance = db_query("SELECT * FROM {commerce_funds_user_funds} WHERE uid=" . $user->uid)->fetchAssoc();
  $user_balance['balance'] -= $charge['amount'];

  drupal_write_record('commerce_funds_user_funds', $user_balance, 'uid');

  $transaction = commerce_payment_transaction_new('commerce_funds_payment', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = t('Payment processed successfully');

  commerce_payment_transaction_save($transaction);

  commerce_checkout_complete($order);
}