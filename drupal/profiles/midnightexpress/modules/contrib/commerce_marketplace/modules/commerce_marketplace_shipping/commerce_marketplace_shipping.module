<?php

/**
 * @file
 * Defines an marketplace shipping method.
 */


/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_marketplace_shipping_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['commerce_marketplace_shipping_method'] = array(
    'title' => t('Marketplace shipping method'),
    'description' => t('Gathers shipping rates from Store orders and adds them to Marketplace order '),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_marketplace_shipping_commerce_shipping_service_info() {
  $shipping_services = array();

  $shipping_services['marketplace_shipping_service'] = array(
    'title' => t('Marketplace shipping service'),
    'display_title' => t('Calculated shipping rate based on store preferences'),
    'display_description' => t('Shipping rate is calculated based on the store-specific shipping methods and rates.'),
    'shipping_method' => 'commerce_marketplace_shipping_method',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'commerce_marketplace_shipping_service_rate',
//      'details_form' => 'commerce_marketplace_shipping_service_details_form',
//      'details_form_validate' => 'commerce_marketplace_shipping_service_details_form_validate',
//      'details_form_submit' => 'commerce_marketplace_shipping_service_details_form_submit',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function commerce_marketplace_shipping_service_rate($shipping_service, $order) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_order')
      ->entityCondition('bundle', 'commerce_store_order')
      ->propertyCondition('uid', $order->uid)
      ->fieldCondition('cmp_order', 'target_id', $order->order_id)
      ->propertyCondition('status', array('pending', 'processing', 'completed'), 'NOT IN');
  $result = $query->execute();
  $amount = 0;
  if (isset($result['commerce_order'])) {
    foreach ($result['commerce_order'] as $res) {
      $store_order = commerce_order_load($res->order_id);
      if ($store_order) {
        if (isset($order->commerce_customer_shipping)) {
          $store_order->commerce_customer_shipping = $order->commerce_customer_shipping;
        }
        module_load_include('inc', 'commerce_shipping', 'commerce_shipping.rules');
        commerce_shipping_collect_rates($store_order);
        commerce_shipping_rate_apply($store_order);
        commerce_order_save($store_order);
        $total = field_get_items('commerce_order', $store_order, 'commerce_order_total');
        foreach(commerce_shipping_services() as $shipping_service){
          $shipping_services[] = $shipping_service['price_component'];
        }
        foreach ($total as $item) {
          foreach($item['data']['components'] as $component) {
            if (in_array($component['name'], $shipping_services) && $component['name'] != 'marketplace_shipping_service' ) {
              $amount += $component['price']['amount'];
              //set the currency code to the currency code of the last store order!
              //Maybe this isn't the smartest way to handle the whole thing though
              $currency_code = $component['price']['currency_code'];
            }
          }
        }
      }
    }
  }
  return array(
    'amount' => $amount,
    'currency_code' => $currency_code,
    'data' => array(),
  );
}

/**
 * Shipping service callback: returns the example shipping service details form.
 */
function commerce_marketplace_shipping_service_details_form($pane_form, $pane_values, $checkout_pane, $order, $shipping_service) {
  $form = array();
  $pane_values['service_details'] += array(
    'name' => '',
    'express' => '',
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#description' => t('This is a demonstration field coded to fail validation for single character values.'),
    '#default_value' => $pane_values['service_details']['name'],
    '#required' => TRUE,
  );

  $form['express'] = array(
    '#type' => 'checkbox',
    '#title' => t('Express delivery'),
    '#description' => t('Express delivery (costs an additional $15)'),
    '#default_value' => $pane_values['service_details']['express'],
  );

  return $form;
}

/**
 * Shipping service callback: validates the example shipping service details.
 */
function commerce_marketplace_shipping_service_details_form_validate($details_form, $details_values, $shipping_service, $order, $form_parents) {
  if (strlen($details_values['name']) < 2) {
    form_set_error(implode('][', array_merge($form_parents, array('name'))), t('You must enter a name two or more characters long.'));

    // Even though the form error is enough to stop the submission of the form,
    // it's not enough to stop it from a Commerce standpoint because of the
    // combined validation / submission going on per-pane in the checkout form.
    return FALSE;
  }
}

/**
 * Shipping service callback: increases the shipping line item's unit price if
 * express delivery was selected.
 */
function commerce_marketplace_shipping_service_details_form_submit($details_form, $details_values, $line_item) {
  if ($details_values['express']) {
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

    // Build a price array for the express delivery fee.
    $express_price = array(
      'amount' => 1500,
      'currency_code' => 'USD',
      'data' => array(),
    );

    // Add the express upcharge to the line item unit price.
    $line_item_wrapper->commerce_unit_price->amount = $line_item_wrapper->commerce_unit_price->amount->value() + 1500;

    // Add the express delivery fee component to the unit price.
    $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
      $line_item_wrapper->commerce_unit_price->value(),
      'example_shipping_service_express',
      $express_price,
      TRUE,
      FALSE
    );
  }
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_marketplace_shipping_commerce_price_component_type_info() {
  return array(
    'example_shipping_service_express' => array(
      'title' => t('Express delivery'),
      'weight' => 20,
    ),
  );
}

/**
 * Implements hook_default_rules_configuration_alter().
 */
function commerce_marketplace_shipping_default_rules_configuration_alter(&$rules) {
  foreach ($rules as $rule_name => $rule) {
    if (strpos($rule_name, 'commerce_shipping_method_') === 0) {
      if ($rule_name == 'commerce_shipping_method_commerce_marketplace_shipping_method') {
        $rules[$rule_name]->condition(rules_condition('data_is', array(
          'data:select' => 'commerce-order:type',
          'op' => '==',
          'value' => 'commerce_marketplace_order',
        )));
      }
      else {
        $rules[$rule_name]->condition(rules_condition('data_is', array(
          'data:select' => 'commerce-order:type',
          'op' => '==',
          'value' => 'commerce_marketplace_order',
        ))->negate());
      }
    }
  }
}
